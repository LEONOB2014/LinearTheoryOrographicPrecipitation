# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LTOrographicPrecipitation
                                 A QGIS plugin
 Implements the Smith & Barstad (2004) LT model
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-02
        copyright            : (C) 2018 by Andy Aschwanden and Constantine Khrulev
        email                : ckhroulev@alaska.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Andy Aschwanden and Constantine Khrulev'
__date__ = '2018-05-02'
__copyright__ = '(C) 2018 by Andy Aschwanden and Constantine Khrulev'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import numpy as np
from PyQt5.QtCore import QCoreApplication
from qgis.core import (Qgis,
                       QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsRasterBlock,
                       QgsRasterFileWriter,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterCrs,
                       QgsProcessingParameterExtent,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterRasterDestination)


class LTOrographicPrecipitationTestInput(QgsProcessingAlgorithm):
    """
    Creates the gaussian bump field for testing.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    TARGET_CRS = 'TARGET_CRS'
    EXTENT = 'EXTENT'
    DX = 'DX'
    DY = 'DY'
    X_MIN = 'X_MIN'
    X_MAX = 'X_MAX'
    Y_MIN = 'Y_MIN'
    Y_MAX = 'Y_MAX'
    X0 = 'X0'
    Y0 = 'Y0'
    SIGMA_X = 'SIGMA_X'
    SIGMA_Y = 'SIGMA_Y'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(QgsProcessingParameterCrs(self.TARGET_CRS,
                                                    self.tr('Target CRS'),
                                                    'ProjectCrs'))

        x_min = -100e3
        x_max = 200e3
        y_min = -150e3
        y_max = 150e3
        dx = 750
        dy = 750
        x0 = -25e3
        y0 = 0.0
        sigma_x = 15e3
        sigma_y = 15e3

        self.addParameter(QgsProcessingParameterExtent(self.EXTENT,
                                                       self.tr('Extent'),
                                                       "{}, {}, {}, {}".format(x_min, x_max, y_min, y_max)))

        self.addParameter(QgsProcessingParameterNumber(self.DX,
                                                       self.tr("Grid spacing (dx)"),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=dx,
                                                       minValue=0.0))
        self.addParameter(QgsProcessingParameterNumber(self.DY,
                                                       self.tr("Grid spacing (dy)"),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=dy,
                                                       minValue=0.0))

        self.addParameter(QgsProcessingParameterNumber(self.X0,
                                                       self.tr("Center coordinate (x)"),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=x0))

        self.addParameter(QgsProcessingParameterNumber(self.Y0,
                                                       self.tr("Center coordinate (y)"),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=y0))

        s_x = QgsProcessingParameterNumber(self.SIGMA_X,
                                           self.tr("Spread in the X direction (sigma_x)"),
                                           QgsProcessingParameterNumber.Double,
                                           defaultValue=sigma_x,
                                           minValue=0.0)
        s_x.setFlags(s_x.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(s_x)

        s_y = QgsProcessingParameterNumber(self.SIGMA_Y,
                                           self.tr("Spread in the Y direction (sigma_y)"),
                                           QgsProcessingParameterNumber.Double,
                                           defaultValue=sigma_y,
                                           minValue=0.0)
        s_y.setFlags(s_y.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(s_y)


        self.addParameter(QgsProcessingParameterRasterDestination(self.OUTPUT,
                                                                  self.tr('Output')))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        crs = self.parameterAsCrs(parameters, self.TARGET_CRS, context)
        extent = self.parameterAsExtent(parameters, self.EXTENT, context, crs)

        x_min = extent.xMinimum()
        x_max = extent.xMaximum()
        y_min = extent.yMinimum()
        y_max = extent.yMaximum()

        dx = self.parameterAsDouble(parameters, self.DX, context)
        dy = self.parameterAsDouble(parameters, self.DY, context)

        outputFile = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
        outputFormat = QgsRasterFileWriter.driverForExtension(os.path.splitext(outputFile)[1])

        rows = max([np.ceil(extent.height() / dy) + 1, 1.0])
        cols = max([np.ceil(extent.width() / dx) + 1, 1.0])

        writer = QgsRasterFileWriter(outputFile)
        writer.setOutputProviderKey('gdal')
        writer.setOutputFormat(outputFormat)
        provider = writer.createOneBandRaster(Qgis.Float64, cols, rows, extent, crs)
        provider.setNoDataValue(1, -9999)

        data = np.zeros((1, cols)) + dx
        block = QgsRasterBlock(Qgis.Float32, cols, 1)
        block.setData(data.data())

        total = 100.0 / rows if rows else 0
        for i in range(rows):
            if feedback.isCanceled():
                break

            provider.writeBlock(block, 1, 0, i)
            feedback.setProgress(int(i * rows))

        provider.setEditable(False)

        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Test input (gaussian bump)'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return LTOrographicPrecipitationTestInput()
